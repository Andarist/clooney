import{Comlink}from'comlink';export{Comlink}from'comlink';const thisScriptSrc='document'in self?document.currentScript&&document.currentScript.src:'';export class RoundRobinStrategy{constructor(a={}){this._nextIndex=0,this._options=Object.assign({},RoundRobinStrategy.defaultOptions,a),this._workers=Array(this._options.maxNumWorkers).fill(null)}static get defaultOptions(){return{workerFile:thisScriptSrc,maxNumWorkers:1,newWorkerFunc:async(a)=>new Worker(a)}}async _initOrGetWorker(a){if(a>=this._workers.length)throw Error('No worker available');if(!this._workers[a]){const b=await this._options.newWorkerFunc(this._options.workerFile);this._workers[a]=[b,Comlink.proxy(b)]}return this._workers[a][1]}async getWorker(){const a=await this._initOrGetWorker(this._nextIndex);return this._nextIndex=(this._nextIndex+1)%this._options.maxNumWorkers,a}async spawn(a,b={}){const c=await this.getWorker(b);return await c.spawn(a.toString(),b)}async terminate(){this._workers.forEach((a)=>a&&a[0].terminate()),this._workers.length=0}get terminated(){return 0>=this._workers.length}}const defaultStrategy=new RoundRobinStrategy;export async function spawn(a,b={}){return defaultStrategy.spawn(a,b)}export function makeWorker(a=self){Comlink.expose({async spawn(a){const b=new Function(`return ${a};`)();return Comlink.proxyValue(new b)}},a)}function isWorker(){const a=self.WorkerGlobalScope;return a&&self instanceof a}isWorker()&&makeWorker();
