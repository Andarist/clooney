import{Comlink}from'comlink';export class RoundRobinStrategy{constructor(a){this._nextIndex=0,this._workerFile=a,this._workers=Array(this.numWorkers).fill(null)}get numWorkers(){return navigator.hardwareConcurrency||1}_initOrGetWorker(a){if(a>=this._workers.length)throw Error('No worker available');if(!this._workers[a]){const b=new Worker(this._workerFile);this._workers[a]=[b,Comlink.proxy(b)]}return this._workers[a][1]}getWorker(){const a=this._initOrGetWorker(this._nextIndex);return this._nextIndex=(this._nextIndex+1)%this.numWorkers,Promise.resolve(a)}async spawn(a,b={}){const c=await this.getWorker(b);return await c.spawn(a.toString())}async terminate(){this._workers.forEach((a)=>a&&a[0].terminate()),this._workers.length=0}get terminated(){return 0>=this._workers.length}}export function makeWorker(){Comlink.expose({async spawn(a){const b=new Function(`return ${a};`)();return Comlink.proxyValue(new b)}},self)}
